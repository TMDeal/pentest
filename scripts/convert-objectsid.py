#!/usr/bin/env python

import sys
import base64
import struct
import binascii

def byteToLong(byte, little_endian=True):
    '''
    Convert bytes into a Python integer
    byte - bytes to convert
    little_endian - True (default) or False for little or big endian
    '''
    if len(byte) > 8:
        raise Exception('Bytes too long. Needs to be <= 8 or 64bit')
    else:
        if little_endian:
            a = byte.ljust(8, b'\x00')
            return struct.unpack('<q', a)[0]
        else:
            a = byte.rjust(8, b'\x00')
            return struct.unpack('>q', a)[0]


def strsid(byte):
    '''
    Convert bytes into a string SID
    byte - bytes to convert
    '''
    ret = 'S'
    sid = []
    sid.append(byteToLong(byte[0:1]))
    sid.append(byteToLong(byte[2:2+6], False))
    for i in range(8, len(byte), 4):
        sid.append(byteToLong(byte[i:i+4]))
    for i in sid:
        ret += '-' + str(i)
    return ret


def b64Strsid(data):
    '''
    Decode a base64 SID into string
    data - base64 encoded sid
    '''
    return strsid(base64.b64decode(data))


objectSid = sys.argv[1]
print(b64Strsid(objectSid))
